{"version":3,"sources":["../../../../app/components/Reports/__tests__/ReportsShow-test.jsx"],"names":["middlewares","mockStore","describe","it","trueUrls","site","apiUrl","domain","dispatched","oldFetch","fetch","a","store1","reports","name","report","n_reports","home","renderIntoDocument","reports_page"],"mappings":";;AAAA;;;;AACA;;;;AACA;;AACA;;;;AACA;;AACA;;AACA;;;;AACA;;;;AACA;;AAKA;;;;AACA;;;;AACA;;;;;;AALA,IAAMA,cAAc,sBAApB;AACA,IAAMC,YAAY,8BAAeD,WAAf,CAAlB;;AAMAE,SAAS,aAAT,EAAwB,YAAM;AAC5BC,KAAG,oBAAH,EAAyB,YAAM;AAC7B,QAAIC,WAAW,EAAE;AACf;AACAC,YAAS,iBAAOC,MAAhB,wBAAyC,iBAAOC,MAAhD;AAFa,KAAf;AAIA,QAAIC,aAAa;AACf;AACAH,YAAM;AAFS,KAAjB;AAIA,QAAII,WAAaC,KAAjB;AACAA,YAAQ,eAASC,CAAT,EAAY;AAClB;AACA;AACA,UAAIA,MAAMP,SAASC,IAAnB,EAAyB;AAAEG,mBAAWH,IAAX,GAAkB,IAAlB;AAAwB;AACnD,aAAOI,SAASE,CAAT,CAAP;AACD,KALD;;AAOA,QAAIC,SAASX,UAAU;AACrBY,eAAS,CACP,EAAEC,MAAM,MAAR,EADO,CADY;AAIrBC,cAAQ,EAAED,MAAM,MAAR,EAJa;AAKrBT,YAAM;AACJW,mBAAW;AADP;AALe,KAAV,CAAb;AASA,QAAIC,OAAO,oBAAeC,kBAAf,CACT;AAAA;AAAA,QAAU,OAAON,MAAjB;AAA0B,6DAAa,QAAQ,EAAEO,cAAc,CAAhB,EAArB;AAA1B,KADS,CAAX;AAGA;AACA;AACD,GA/BD;AAgCD,CAjCD","file":"ReportsShow-test.js","sourcesContent":["import React          from 'react';\nimport ReactDOM       from 'react-dom'\nimport { expect }     from 'chai'\nimport ReactTestUtils from 'react-dom/test-utils'\nimport { shallow }    from 'enzyme'\nimport { Provider }   from 'react-redux'\nimport configureStore from 'redux-mock-store'\nimport thunk          from 'redux-thunk'\nimport 'whatwg-fetch'\n\nconst middlewares = [thunk]\nconst mockStore = configureStore(middlewares)\n\nimport config from 'config'\nimport ReportsShow from '../ReportsShow'\nimport store from '../../../stores'\n\ndescribe('ReportsShow', () => {\n  it('sets site in state', () => {\n    let trueUrls = { // @TODO: refactor this into AppRouter\n      // reports: `${config.apiUrl}/api/reports.json?domain=${config.domain}&reports_page=1`,\n      site: `${config.apiUrl}/api/sites/view/${config.domain}.json`,\n    }\n    let dispatched = { \n      // reports: false, \n      site: false, \n    }\n    let oldFetch   = fetch\n    fetch = function(a) {\n      // console.log('+++ +++ called fetch!', a)\n      // if (a === trueUrls.reports) { dispatched.reports = true }\n      if (a === trueUrls.site) { dispatched.site = true }\n      return oldFetch(a)\n    }\n\n    let store1 = mockStore({\n      reports: [\n        { name: 'Name' }\n      ],\n      report: { name: 'abra' },\n      site: {\n        n_reports: 5,\n      },\n    })\n    let home = ReactTestUtils.renderIntoDocument(\n      <Provider store={store1} ><ReportsShow params={{ reports_page: 1 }} /></Provider>\n    )\n    // expect( dispatched.reports ).to.equal( true )\n    // expect( dispatched.site ).to.equal( true )\n  })\n})\n"]}