{"version":3,"sources":["../../../../app/components/Reports/__tests__/ReportsIndex-test.jsx"],"names":["middlewares","mockStore","describe","it","store1","reports","name","site","n_reports","home","renderIntoDocument","reports_page","elem","findDOMNode","tagName","toLowerCase","to","equal","querySelector","innerHTML","eql","trueUrls","apiUrl","domain","dispatched","oldFetch","fetch","a"],"mappings":";;AAAA;;;;AACA;;;;AACA;;AACA;;;;AACA;;AACA;;AACA;;;;AACA;;;;AACA;;AAKA;;;;AACA;;;;AACA;;;;;;AALA,IAAMA,cAAc,sBAApB;AACA,IAAMC,YAAY,8BAAeD,WAAf,CAAlB;;AAMAE,SAAS,cAAT,EAAyB,YAAM;;AAE7BC,KAAG,SAAH,EAAc,YAAM;AAClB,QAAIC,SAASH,UAAU;AACrBI,eAAS,CACP,EAAEC,MAAM,MAAR,EADO,CADY;AAIrBC,YAAM;AACJC,mBAAW;AADP;AAJe,KAAV,CAAb;AAQA,QAAIC,OAAO,oBAAeC,kBAAf,CACT;AAAA;AAAA,QAAU,OAAON,MAAjB;AAA0B,8DAAc,QAAQ,EAAEO,cAAc,CAAhB,EAAtB;AAA1B,KADS,CAAX;AAGA,QAAIC,OAAO,mBAASC,WAAT,CAAqBJ,IAArB,CAAX;AACA,sBAAOG,KAAKE,OAAL,CAAaC,WAAb,EAAP,EAAmCC,EAAnC,CAAsCC,KAAtC,CAA4C,KAA5C;AACA,sBAAOL,KAAKM,aAAL,CAAmB,MAAnB,EAA2BC,SAAlC,EAA6CH,EAA7C,CAAgDI,GAAhD,CAAoD,MAApD;AACD,GAfD;;AAiBAjB,KAAG,oBAAH,EAAyB,YAAM;AAC7B,QAAIkB,WAAW,EAAE;AACfhB,eAAY,iBAAOiB,MAAnB,iCAAqD,iBAAOC,MAA5D,oBADa;AAEbhB,YAAS,iBAAOe,MAAhB,wBAAyC,iBAAOC,MAAhD;AAFa,KAAf;AAIA,QAAIC,aAAa,EAAEnB,SAAS,KAAX,EAAkBE,MAAM,KAAxB,EAAjB;;AAEA,QAAIkB,WAAaC,KAAjB;AACAA,YAAQ,eAASC,CAAT,EAAY;AAClB;AACA,UAAIA,MAAMN,SAAShB,OAAnB,EAA4B;AAAEmB,mBAAWnB,OAAX,GAAqB,IAArB;AAA2B;AACzD,UAAIsB,MAAMN,SAASd,IAAnB,EAAyB;AAAEiB,mBAAWjB,IAAX,GAAkB,IAAlB;AAAwB;AACnD,aAAOkB,SAASE,CAAT,CAAP;AACD,KALD;;AAOA,QAAIvB,SAASH,UAAU;AACrBI,eAAS,CACP,EAAEC,MAAM,MAAR,EADO,CADY;AAIrBC,YAAM;AACJC,mBAAW;AADP;AAJe,KAAV,CAAb;AAQA,QAAIC,OAAO,oBAAeC,kBAAf,CACT;AAAA;AAAA,QAAU,OAAON,MAAjB;AAA0B,8DAAc,QAAQ,EAAEO,cAAc,CAAhB,EAAtB;AAA1B,KADS,CAAX;AAGA,sBAAQa,WAAWnB,OAAnB,EAA6BW,EAA7B,CAAgCC,KAAhC,CAAuC,IAAvC;AACA;AACD,GA5BD;AA8BD,CAjDD","file":"ReportsIndex-test.js","sourcesContent":["import React          from 'react';\nimport ReactDOM       from 'react-dom'\nimport { expect }     from 'chai'\nimport ReactTestUtils from 'react-dom/test-utils'\nimport { shallow }    from 'enzyme'\nimport { Provider }   from 'react-redux'\nimport configureStore from 'redux-mock-store'\nimport thunk          from 'redux-thunk'\nimport 'whatwg-fetch'\n\nconst middlewares = [thunk]\nconst mockStore = configureStore(middlewares)\n\nimport config from 'config'\nimport ReportsIndex from '../ReportsIndex'\nimport store from '../../../stores'\n\ndescribe('ReportsIndex', () => {\n\n  it('renders', () => {\n    let store1 = mockStore({\n      reports: [\n        { name: 'Name' }\n      ],\n      site: {\n        n_reports: 5,\n      }\n    })\n    let home = ReactTestUtils.renderIntoDocument(\n      <Provider store={store1} ><ReportsIndex params={{ reports_page: 1 }} /></Provider>\n    )\n    let elem = ReactDOM.findDOMNode(home)\n    expect(elem.tagName.toLowerCase()).to.equal('div')\n    expect(elem.querySelector('h2 a').innerHTML).to.eql('Name')\n  })\n\n  it('sets site in state', () => {\n    let trueUrls = { // @TODO: refactor this into AppRouter\n      reports: `${config.apiUrl}/api/reports.json?domain=${config.domain}&reports_page=1`,\n      site: `${config.apiUrl}/api/sites/view/${config.domain}.json`,\n    }\n    let dispatched = { reports: false, site: false, }\n\n    let oldFetch   = fetch\n    fetch = function(a) {\n      // console.log('+++ +++ called fetch!', a)\n      if (a === trueUrls.reports) { dispatched.reports = true }\n      if (a === trueUrls.site) { dispatched.site = true }\n      return oldFetch(a)\n    }\n\n    let store1 = mockStore({\n      reports: [\n        { name: 'Name' }\n      ],\n      site: {\n        n_reports: 5,\n      },\n    })\n    let home = ReactTestUtils.renderIntoDocument(\n      <Provider store={store1} ><ReportsIndex params={{ reports_page: 1 }} /></Provider>\n    )\n    expect( dispatched.reports ).to.equal( true )\n    // expect( dispatched.site ).to.equal( true )\n  })\n\n})\n"]}