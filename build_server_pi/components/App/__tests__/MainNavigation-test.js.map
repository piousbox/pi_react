{"version":3,"sources":["../../../../app/components/App/__tests__/MainNavigation-test.jsx"],"names":["middlewares","mockStore","describe","it","trueUrls","site","apiUrl","domain","dispatched","oldFetch","fetch","a","store1","n_reports","home","renderIntoDocument","to","equal"],"mappings":";;AAAA;;;;AACA;;;;AACA;;AACA;;;;AACA;;AACA;;AACA;;;;AACA;;;;AACA;;AAKA;;;;AACA;;;;AACA;;;;;;AALA,IAAMA,cAAc,sBAApB;AACA,IAAMC,YAAY,8BAAeD,WAAf,CAAlB;;AAMAE,SAAS,gBAAT,EAA2B,YAAM;AAC/BC,KAAG,oBAAH,EAAyB,YAAM;AAC7B,QAAIC,WAAW,EAAE;AACfC,YAAS,iBAAOC,MAAhB,wBAAyC,iBAAOC,MAAhD;AADa,KAAf;AAGA,QAAIC,aAAa;AACf;AACAH,YAAM;AAFS,KAAjB;AAIA,QAAII,WAAaC,KAAjB;AACAA,YAAQ,eAASC,CAAT,EAAY;AAClB;AACA,UAAIA,MAAMP,SAASC,IAAnB,EAAyB;AAAEG,mBAAWH,IAAX,GAAkB,IAAlB;AAAwB;AACnD,aAAOI,SAASE,CAAT,CAAP;AACD,KAJD;;AAMA,QAAIC,SAASX,UAAU;AACrBI,YAAM;AACJQ,mBAAW;AADP;AADe,KAAV,CAAb;AAKA,QAAIC,OAAO,oBAAeC,kBAAf,CACT;AAAA;AAAA,QAAU,OAAOH,MAAjB;AAA0B,gEAAgB,QAAQ,EAAxB,EAA4B,QAAQ,EAApC;AAA1B,KADS,CAAX;AAGA,sBAAQJ,WAAWH,IAAnB,EAA0BW,EAA1B,CAA6BC,KAA7B,CAAoC,IAApC;AACD,GAxBD;AAyBD,CA1BD","file":"MainNavigation-test.js","sourcesContent":["import React          from 'react';\nimport ReactDOM       from 'react-dom'\nimport { expect }     from 'chai'\nimport ReactTestUtils from 'react-dom/test-utils'\nimport { shallow }    from 'enzyme'\nimport { Provider }   from 'react-redux'\nimport configureStore from 'redux-mock-store'\nimport thunk          from 'redux-thunk'\nimport 'whatwg-fetch'\n\nconst middlewares = [thunk]\nconst mockStore = configureStore(middlewares)\n\nimport config from 'config'\nimport MainNavigation from '../MainNavigation'\nimport store from '../../../stores'\n\ndescribe('MainNavigation', () => {\n  it('sets site in state', () => {\n    let trueUrls = { // @TODO: refactor this into AppRouter\n      site: `${config.apiUrl}/api/sites/view/${config.domain}.json`,\n    }\n    let dispatched = { \n      // reports: false, \n      site: false, \n    }\n    let oldFetch   = fetch\n    fetch = function(a) {\n      // console.log('+++ +++ called fetch!', a)\n      if (a === trueUrls.site) { dispatched.site = true }\n      return oldFetch(a)\n    }\n\n    let store1 = mockStore({\n      site: {\n        n_reports: 5,\n      },\n    })\n    let home = ReactTestUtils.renderIntoDocument(\n      <Provider store={store1} ><MainNavigation params={{}} routes={[]} /></Provider>\n    )\n    expect( dispatched.site ).to.equal( true )\n  })\n})\n"]}